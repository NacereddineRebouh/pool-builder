/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.5 public/models/insetSteps.glb -ts s
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { selectTarget, setPivotVisibility, setTarget } from '@/slices/targetSlice'
import { useAppDispatch, useAppSelector } from '@/store/hooks'

type GLTFResult = GLTF & {
  nodes: {
    Inset_steps: THREE.Mesh
  }
  materials: {
    ['Inset steps']: THREE.MeshStandardMaterial
  }
}

export function InsetSteps(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/insetSteps.glb') as GLTFResult
  const groupRef = useRef<THREE.Group>(null)
  const dispatch = useAppDispatch();
  const target = useAppSelector(selectTarget);
  return (
    <group {...props} dispose={null} ref={groupRef} onClick={(e)=>{
      // console.log(target?.uuid,"::::",groupRef?.current?.uuid)
      dispatch(setPivotVisibility(true))
      if(target?.uuid!=groupRef?.current?.uuid){
       dispatch(setTarget(groupRef.current))
      }
    }}>
      <mesh castShadow receiveShadow geometry={nodes.Inset_steps.geometry} material={materials['Inset steps']} />
    </group>
  )
}

useGLTF.preload('/models/insetSteps.glb')
